/*
 * Drop EL to that specified by the spsr value in register mode, at
 * the address specified in register addr.
 */
.macro drop_el mode addr
    msr elr_el3, \addr
    msr spsr_el3, \mode
    eret
    .endm

/*
 * Branch according to exception level
 */
.macro  switch_el, xreg, el3_label, el2_label, el1_label
    mrs \xreg, CurrentEL
    cmp \xreg, 0xc
    b.eq    \el3_label
    cmp \xreg, 0x8
    b.eq    \el2_label
    cmp \xreg, 0x4
    b.eq    \el1_label
    .endm

.macro  exception_entry

    stp x29, x30, [sp, #-16]!
    stp x27, x28, [sp, #-16]!
    stp x25, x26, [sp, #-16]!
    stp x23, x24, [sp, #-16]!
    stp x21, x22, [sp, #-16]!
    stp x19, x20, [sp, #-16]!
    stp x17, x18, [sp, #-16]!
    stp x15, x16, [sp, #-16]!
    stp x13, x14, [sp, #-16]!
    stp x11, x12, [sp, #-16]!
    stp x9,  x10, [sp, #-16]!
    stp x7,  x8,  [sp, #-16]!
    stp x5,  x6,  [sp, #-16]!
    stp x3,  x4,  [sp, #-16]!
    stp x1,  x2,  [sp, #-16]!

    /* Could be running at EL3/EL2/EL1 */
    switch_el x11, 3f, 2f, 1f
3:  mrs x1, esr_el3
    mrs x2, elr_el3
    b   0f
2:  mrs x1, esr_el2
    mrs x2, elr_el2
    b   0f
1:  mrs x1, esr_el1
    mrs x2, elr_el1
0:
    stp x2, x0, [sp, #-16]!
    mov x0, sp
.endm

/*
 * Exit Exception.
 * This will restore the processor state that is ELR/X0~X30
 * from the stack frame.
 */
.macro  exception_exit
    ldp x2, x0, [sp],#16

    /* Could be running at EL3/EL2/EL1 */
    switch_el x11, 3f, 2f, 1f
3:  msr elr_el3, x2
    b   0f
2:  msr elr_el2, x2
    b   0f
1:  msr elr_el1, x2
0:
    ldp x1,  x2,  [sp],#16
    ldp x3,  x4,  [sp],#16
    ldp x5,  x6,  [sp],#16
    ldp x7,  x8,  [sp],#16
    ldp x9,  x10, [sp],#16
    ldp x11, x12, [sp],#16
    ldp x13, x14, [sp],#16
    ldp x15, x16, [sp],#16
    ldp x17, x18, [sp],#16
    ldp x19, x20, [sp],#16
    ldp x21, x22, [sp],#16
    ldp x23, x24, [sp],#16
    ldp x25, x26, [sp],#16
    ldp x27, x28, [sp],#16
    ldp x29, x30, [sp],#16
    eret
.endm


    .text
    .globl entry
    .globl _start
_start:

    mrs x0, CurrentEL
    cmp x0, #0x0c             //0x0c stands for EL3
    b.ne start_el1            // skip EL3 initialisation

    /*
     * Initialize vector table
     */
    ldr x0, =vectors_el1
    msr vbar_el1, x0
    ldr x0, =vectors_el2
    msr vbar_el2, x0
    ldr x0, =vectors_el3
    msr vbar_el3, x0

    /*
     * SCR_EL3 configuration
     */
    mov x0, #0x00               // RES1 is set to 0
    orr x0, x0, #(1 << 0)       // Level lower than EL3 are in Non-secure state
    orr x0, x0, #(1 << 1)       // IRQs route to EL3
    orr x0, x0, #(1 << 2)       // FIQs route to EL3
    orr x0, x0, #(1 << 3)       // EA   route to EL3
    orr x0, x0, #(1 << 7)       // SMC disable
    orr x0, x0, #(1 << 8)       // HVC enable
    orr x0, x0, #(1 << 10)      // Execution state:  EL2 is 64-bit; EL1 is controlled by HCR_EL2
    msr scr_el3, x0

    /*
     * HCR_EL2 configuration
     */
    mov x2, #(1 << 31)          // Execution state: EL1 is 64-bit
    msr hcr_el2, x2


    ldr x0, =cnt_freq
    ldr x0, [x0]
    msr cntfrq_el0, x0

    msr cptr_el3, xzr           // Disable copro. traps to EL3

    bl  setup_stack

    bl gic_secure_init

    b start_el3

    .ltorg
    .org    0x100

cnt_freq:
    .quad 100000000



    .text

/*
 * We should set up stack for both EL1 and EL3
 */
setup_stack:
    ldr x2, =stack_top_el1
    msr sp_el1, x2               // Initialize SP for el1
    ldr x2, =stack_top_el3
    mov sp, x2                   // sp refers to sp_el3 at this moment
    ret

    .section .stack
    .align 4
stack_bottom:
    .space 0x4000                //Stack size
stack_top_el1:
    .space 0x4000
stack_top_el3:



    .text
/*
 * Initial GIC-400
 */
gic_secure_init:
    ldr w3, =0xff000fff         // Mask
    ldr w4, =0x0200043B         // Stands for ARM GIC400

    ldr x1, =gic400d_address
    ldr x1, [x1]
    ldr w2, [x1, #8]            // Get GICD_IIDR
    and w2, w3, w2

    cmp w2, w4
    b.eq gic400_secure_init

gic_init_error:                 // Not GIC-400, Should never reach there
    ret

gic400_secure_init:
    ldr x1, =gic400d_address
    ldr x1, [x1]                // GICD_CTLR
    mov w0, #3                  // EnableGrp0 | EnableGrp1
    str w0, [x1]

    ldr x1, =gic400d_address
    ldr x1, [x1]
    add x1, x1, #0x80           // GICD_IGROUPR
    mov w0, #~0                 // Grp1 interrupts
    str w0, [x1]
    b.ne 2f                     // Only local interrupts for secondary CPUs
    ldr x2, =gic400d_address
    ldr x2, [x2]
    add x2, x2, #0x4            // GICD_TYPER
    ldr w3, [x2]
    ands w3, w3, #0x1f          // ITLinesNumber
    b.eq 2f
1:  str w0, [x1, #4]!
    subs    w3, w3, #1
    b.ne    1b

2:  ldr x1, =gic400c_address
    ldr x1, [x1]                // GICC_CTLR
    mov w0, #3                  // EnableGrp0 | EnableGrp1
    str w0, [x1]

    mov w0, #1 << 7             // allow NS access to GICC_PMR
    str w0, [x1, #4]            // GICC_PMR

    ret

gic400d_address:
    .quad 0x60001000            // Base addr of Dispatcher
gic400c_address:
    .quad 0x60002000            // Base addr of CPU interface



    .text
start_el3:
    /*
     * Prepare the switch to EL1 from EL3
     */
    //TODO:the value of SCTLR_EL1_RESET should be set later
    //ldr x0, #0
    //msr sctlr_el1, x0

    //TODO:are these value correct?
    mov x1, #(1 << 9 | 1 << 8 | 1 <<7 | 1 << 6 | 5 << 0)
    ldr x0, =start_el1         // Return after mode switch
    drop_el x1, x0

start_el1:

    //generate SGI -Just for test usage
    //ldr x1, =gic400d_address
    //ldr x1, [x1]
    //mov w2, #(1 << 0)
    //orr w2, w2, #(1 << 15)
    //orr w2, w2, #(1 << 25)
    //str w2, [x1, #0xf00]     // GICD_IIDR

    //use smc and hvc to generate exception  -Just for test usage
    //smc #0b1111
    //hvc #0b1111

    b entry



/* Exception vectors.*/
    .align  11
vectors_el1:
    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq1        //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler

    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq2        //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler



    .align  11
vectors_el2:
    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq3       //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler

    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq4            //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler


    .align  11

vectors_el3:
    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq5            //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler

    .align  7
    bl  _do_bad_sync        //Current EL Synchronous Thread

    .align  7
    bl  _do_bad_irq6            //Current EL IRQ Thread

    .align  7
    bl  _do_bad_fiq         //Current EL FIQ Thread

    .align  7
    bl  _do_bad_error       //Current EL Error Thread

    .align  7
    bl  _do_sync            //Current EL Synchronous Handler

    .align  7
    bl  _do_irq             //Current EL IRQ Handler

    .align  7
    bl  _do_fiq             //Current EL FIQ Handler

    .align  7
    bl  _do_error           //Current EL Error Handler



_do_bad_sync:
    exception_entry
    bl  halt                //do_bad_sync
    exception_exit

_do_bad_irq1:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_irq2:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_irq3:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_irq4:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_irq5:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_irq6:
    exception_entry
    bl  halt                //do_bad_irq
    exception_exit

_do_bad_fiq:
    exception_entry
    bl  halt                //do_bad_fiq
    exception_exit

_do_bad_error:
    exception_entry
    bl  halt                //do_bad_error
    exception_exit

_do_sync:
    exception_entry
    bl  halt                //do_sync
    exception_exit

_do_irq:
    exception_entry
    bl  halt             //do_irq
    exception_exit

_do_fiq:
    exception_entry
    bl halt                 //do_fiq
    exception_exit

_do_error:
    exception_entry
    bl  halt                //do_error
    exception_exit

halt:
    b .
